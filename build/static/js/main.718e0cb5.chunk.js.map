{"version":3,"sources":["reducers/index.js","components/Search.js","constants/index.js","actions/index.js","components/MyShow.js","App.js","serviceWorker.js","index.js"],"names":["rootReducer","combineReducers","Search","props","handleOnChange","event","setState","searchValue","target","value","handleSearch","saveSearchQuery","state","fetchData","searchInput","saveSearchList","searchUrl","getMyShowURL","fetch","then","response","json","console","log","name","type","placeholder","onChange","this","onClick","Component","connect","dispatch","query","payload","list","MyShow","App","className","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mQAMeA,EAJKC,YAAgB,I,yDCI9BC,E,YACF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAOVC,eAAiB,SAAAC,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAT3B,EAYnBC,aAAe,WAAO,IACVC,EAAoB,EAAKR,MAAzBQ,gBACAJ,EAAgB,EAAKK,MAArBL,YAERI,EAAgBA,GAChB,EAAKE,UAAUN,IAjBA,EAoBnBM,UAAY,SAAAC,GAAgB,IAChBC,EAAmB,EAAKZ,MAAxBY,eACFC,EC3BO,SAAAF,GAAW,gBAFX,sDAEW,cAAyBA,GD2B/BG,CAAaH,GAE/BI,MAAMF,GACDG,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAK,YAAiB,IAAdjB,EAAa,EAAbA,OACLa,EAAeb,GACfoB,QAAQC,IAAIrB,OA3BpB,EAAKU,MAAQ,CACTL,YAAa,IAJF,E,sEAkCT,IAAD,OACL,OACI,kBAAC,WAAD,KACI,2BACIiB,KAAK,OACLC,KAAK,OACLC,YAAY,iCACZC,SAAU,SAAAtB,GAAK,OAAI,EAAKD,eAAeC,IACvCI,MAAOmB,KAAKhB,MAAML,cAEtB,4BAAQsB,QAASD,KAAKlB,cAAtB,e,GA7CKoB,aAwDNC,cACX,MANuB,SAAAC,GAAQ,MAAK,CACpCrB,gBAAiB,SAAAsB,GAAK,OAAID,EE9CvB,SAAyBC,GAC5B,MAAO,CACHR,KAVoB,eAWpBS,QAASD,GF2CsBtB,CAAgBsB,KACnDlB,eAAgB,SAAAoB,GAAI,OAAIH,EExCrB,SAAwBG,GAC3B,MAAO,CACHV,KAhB0B,qBAiB1BS,QAASC,GFqCoBpB,CAAeoB,QAGrCJ,CAGb7B,GGrDakC,MATf,WACE,OACE,kBAAC,WAAD,KACI,uCACA,kBAAC,EAAD,Q,MCOOC,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCIYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTN,IAAMC,EAAQC,YAAY7C,GAE1B8C,IAASC,OACL,kBAAC,IAAD,CAAUH,MAAOA,GACb,kBAAC,EAAD,OAEJI,SAASC,eAAe,SDoHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.718e0cb5.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\n\nconst rootReducer = combineReducers({\n\n});\n\nexport default rootReducer;","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux'\nimport { getMyShowURL } from \"../constants/index\";\nimport { saveSearchQuery, saveSearchList } from '../actions';\nimport '../assests/Search.css';\n\nclass Search extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            searchValue: \"\"\n        };\n    }\n\n    handleOnChange = event => {\n        this.setState({ searchValue: event.target.value });\n    };\n\n    handleSearch = () => {\n        const { saveSearchQuery } = this.props;\n        const { searchValue } = this.state;\n\n        saveSearchQuery(saveSearchQuery);\n        this.fetchData(searchValue);\n    }\n\n    fetchData = searchInput => {\n        const { saveSearchList } = this.props;\n        const searchUrl = getMyShowURL(searchInput);\n\n        fetch(searchUrl)\n            .then(response => {\n                return response.json();\n            })\n            .then(({ Search }) => {\n                saveSearchList(Search);\n                console.log(Search);\n            });\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <input \n                    name=\"text\" \n                    type=\"text\" \n                    placeholder=\"Search Movie, Series, Episodes\" \n                    onChange={event => this.handleOnChange(event)}\n                    value={this.state.searchValue}\n                />\n                <button onClick={this.handleSearch}>Search</button>\n            </Fragment>\n        );\n    }\n}\n  \nconst mapDispatchToProps = dispatch => ({\n    saveSearchQuery: query => dispatch(saveSearchQuery(query)),\n    saveSearchList: list => dispatch(saveSearchList(list)),\n});\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(Search);\n","const GET_SHOW_API = \"http://www.omdbapi.com/?i=tt3896198&apikey=b4bf74d5\";\n\nconst getMyShowURL = searchInput => `${GET_SHOW_API}&s=${searchInput}`;\n\nexport {\n    getMyShowURL\n};","/*\n * action types\n */\n\nexport const SEARCH_QUERY = 'SEARCH_QUERY';\nexport const SEARCH_LIST_RESULT = 'SEARCH_LIST_RESULT';\n\n\n/*\n * action creators\n */\n\nexport function saveSearchQuery(query) {\n    return { \n        type: SEARCH_QUERY, \n        payload: query \n    }\n}\n\nexport function saveSearchList(list) {\n    return { \n        type: SEARCH_LIST_RESULT, \n        payload: list \n    }\n}\n","import React, { Fragment } from 'react';\nimport Search from \"./Search\";\n\nfunction MyShow() {\n  return (\n    <Fragment>\n        <h1>My Show</h1>\n        <Search />\n    </Fragment>\n  );\n}\n\nexport default MyShow;\n","import React from 'react';\nimport MyShow from \"./components/MyShow\";\nimport './assests/App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <MyShow />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from './reducers'\nimport './assests/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}